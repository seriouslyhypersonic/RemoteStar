#include "PhysicsValues.h"
#include "MightyMath.h"

PhysicsValues::PhysicsValues(double               _machNumber,
                             double               _dynamicViscosity,
                             double               _referencePressure,
                             double               _staticTemperature,
                             const FlowDirection& _flowDirection,
                             const Velocity&      _velocity):
        machNumber(_machNumber),
        dynamicViscosity(_dynamicViscosity),
        referencePressure(_referencePressure),
        staticTemperature(_staticTemperature),
        flowDirection(_flowDirection),
        velocity(_velocity) {}

std::vector<std::string> PhysicsValues::physicsValuesCode() {
    std::vector<std::string> code;
    code = {
            "",
            "    private void physicsValues(){",
            "        Simulation activeSimulation = getActiveSimulation();",
            "",
            "        // Data",
            "        double valueMachNumber        = " + javaScientific(machNumber) + ";",
            "        double valueDynamicViscosity  = " + javaScientific(dynamicViscosity) + ";",
            "        double valueReferencePressure = " + javaScientific(referencePressure) + ";",
            "        double valueStaticTemperature = " + javaScientific(staticTemperature) + ";",
            "        double valueVelocityX         = " + javaScientific(velocity.X) + ";",
            "        double valueVelocityY         = " + javaScientific(velocity.Y) + ";",
            "        double valueVelocityZ         = " + javaScientific(velocity.Z) + ";",
            "        double valueDirectionX        = " + javaScientific(flowDirection.X) + ";",
            "        double valueDirectionY        = " + javaScientific(flowDirection.Y) + ";",
            "        double valueDirectionZ        = " + javaScientific(flowDirection.Z) + ";",
            "",
            "        // Get physics continuum object",
            "        PhysicsContinuum physicsContinuumObj = ((PhysicsContinuum) activeSimulation.getContinuumManager().getContinuum(\"Physics 1\"));",
            "",
            "        // Inviscid flux - AUSM SCHEME",
            "        CoupledFlowModel coupledFlowModelObj = physicsContinuumObj.getModelManager().getModel(CoupledFlowModel.class);",
            "        coupledFlowModelObj.getCoupledInviscidFluxOption().setSelected(CoupledInviscidFluxOption.Type.AUSM_SCHEME);",
            "",
            "        // INITIAL CONDITIONS",
            "        // Dynamic viscosity",
            "        SingleComponentGasModel singleComponentGasModelObj =  physicsContinuumObj.getModelManager().getModel(SingleComponentGasModel.class);",
            "        Gas gasAir = ((Gas) singleComponentGasModelObj.getMaterial());",
            "        ConstantMaterialPropertyMethod constantMaterialPropertyMethodDynamicViscosity = ((ConstantMaterialPropertyMethod) gasAir.getMaterialProperties().getMaterialProperty(DynamicViscosityProperty.class).getMethod());",
            "        constantMaterialPropertyMethodDynamicViscosity.getQuantity().setValue(valueDynamicViscosity);",
            "",
            "        // Reference pressure",
            "        physicsContinuumObj.getReferenceValues().get(ReferencePressure.class).setValue(valueReferencePressure);",
            "",
            "        // Static temperature",
            "        StaticTemperatureProfile staticTemperatureProfileObj = physicsContinuumObj.getInitialConditions().get(StaticTemperatureProfile.class);",
            "        staticTemperatureProfileObj.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValue(valueStaticTemperature);",
            "",
            "        // Velocity",
            "        VelocityProfile velocityProfileObj = physicsContinuumObj.getInitialConditions().get(VelocityProfile.class);",
            "        velocityProfileObj.getMethod(ConstantVectorProfileMethod.class).getQuantity().setComponents(valueVelocityX, valueVelocityY, valueVelocityZ);",
            "",
            "        // BOUNDARY CONDITIONS",
            "        Region regionAir = activeSimulation.getRegionManager().getRegion(\"Air\");",
            "",
            "        // Boundary: FarSide",
            "        Boundary boundaryFarSide = regionAir.getBoundaryManager().getBoundary(\"Subtract.Domain.FarSide\");",
            "        // FarSide - Flow direction",
            "        FlowDirectionProfile flowDirectionProfileFarSide = boundaryFarSide.getValues().get(FlowDirectionProfile.class);",
            "        flowDirectionProfileFarSide.getMethod(ConstantVectorProfileMethod.class).getQuantity().setComponents(valueDirectionX, valueDirectionY, valueDirectionZ);",
            "        // FarSide - Mach number",
            "        MachNumberProfile machNumberProfileFarSide = boundaryFarSide.getValues().get(MachNumberProfile.class);",
            "        // FarSide - Static temperature",
            "        StaticTemperatureProfile staticTemperatureProfileFarSide = boundaryFarSide.getValues().get(StaticTemperatureProfile.class);",
            "        staticTemperatureProfileFarSide.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValue(valueStaticTemperature);",
            "",
            "        // Boundary: Inlet",
            "        Boundary boundaryInlet = regionAir.getBoundaryManager().getBoundary(\"Subtract.Domain.Inlet\");",
            "        // Inlet - Flow direction",
            "        FlowDirectionProfile flowDirectionProfileInlet = boundaryInlet.getValues().get(FlowDirectionProfile.class); ",
            "        flowDirectionProfileInlet.getMethod(ConstantVectorProfileMethod.class).getQuantity().setComponents(valueDirectionX, valueDirectionY, valueDirectionZ);",
            "        // Inlet - Mach number",
            "        MachNumberProfile machNumberProfileInlet = boundaryInlet.getValues().get(MachNumberProfile.class);",
            "        machNumberProfileInlet.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValue(valueMachNumber);"
            "        // Inlet - Static temperature",
            "        StaticTemperatureProfile staticTemperatureProfileInlet = boundaryInlet.getValues().get(StaticTemperatureProfile.class);",
            "        staticTemperatureProfileInlet.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValue(valueStaticTemperature);",
            "",
            "        // Boundary: Outlet",
            "        Boundary boundaryOutlet = regionAir.getBoundaryManager().getBoundary(\"Subtract.Domain.Outlet\");",
            "        // Outlet - Flow direction",
            "        FlowDirectionProfile flowDirectionProfileOutlet = boundaryOutlet.getValues().get(FlowDirectionProfile.class); ",
            "        flowDirectionProfileOutlet.getMethod(ConstantVectorProfileMethod.class).getQuantity().setComponents(valueDirectionX, valueDirectionY, valueDirectionZ);",
            "        // Outlet - Mach number",
            "        MachNumberProfile machNumberProfileOutlet = boundaryOutlet.getValues().get(MachNumberProfile.class);",
            "        machNumberProfileOutlet.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValue(valueMachNumber);",
            "        // Outlet - Static temperature",
            "        StaticTemperatureProfile staticTemperatureProfileOutlet = boundaryOutlet.getValues().get(StaticTemperatureProfile.class);",
            "        staticTemperatureProfileOutlet.getMethod(ConstantScalarProfileMethod.class).getQuantity().setValue(valueStaticTemperature);",
            "    }"
    };
    return code;
}